/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module mojo_top_0 (
    input clk,
    input rst_n,
    output reg [7:0] led,
    input cclk,
    output reg spi_miso,
    input spi_ss,
    input spi_mosi,
    input spi_sck,
    output reg [3:0] spi_channel,
    input avr_tx,
    output reg avr_rx,
    input avr_rx_busy,
    output reg [23:0] io_led,
    output reg [7:0] io_seg,
    output reg [3:0] io_sel,
    input [4:0] io_button,
    input [23:0] io_dip
  );
  
  
  
  wire [4-1:0] M_alu_out;
  wire [1-1:0] M_alu_z;
  wire [1-1:0] M_alu_v;
  wire [1-1:0] M_alu_n;
  wire [4-1:0] M_alu_aOut;
  reg [4-1:0] M_alu_a;
  reg [4-1:0] M_alu_b;
  reg [6-1:0] M_alu_alufn;
  alu4_1 alu (
    .a(M_alu_a),
    .b(M_alu_b),
    .alufn(M_alu_alufn),
    .out(M_alu_out),
    .z(M_alu_z),
    .v(M_alu_v),
    .n(M_alu_n),
    .aOut(M_alu_aOut)
  );
  
  reg rst;
  
  integer i;
  
  reg [2:0] emptyArray;
  
  reg [2:0] fullArray;
  
  localparam TIMEOUT = 2'h2;
  
  wire [1-1:0] M_reset_cond_out;
  reg [1-1:0] M_reset_cond_in;
  reset_conditioner_2 reset_cond (
    .clk(clk),
    .in(M_reset_cond_in),
    .out(M_reset_cond_out)
  );
  wire [1-1:0] M_edge_detector_out;
  reg [1-1:0] M_edge_detector_in;
  edge_detector_3 edge_detector (
    .clk(clk),
    .in(M_edge_detector_in),
    .out(M_edge_detector_out)
  );
  wire [7-1:0] M_seg_seg;
  wire [4-1:0] M_seg_sel;
  reg [16-1:0] M_seg_values;
  multi_seven_seg_4 seg (
    .clk(clk),
    .rst(rst),
    .values(M_seg_values),
    .seg(M_seg_seg),
    .sel(M_seg_sel)
  );
  wire [16-1:0] M_dec_ctr_digits;
  reg [1-1:0] M_dec_ctr_inc;
  multi_dec_ctr_5 dec_ctr (
    .clk(clk),
    .rst(rst),
    .inc(M_dec_ctr_inc),
    .digits(M_dec_ctr_digits)
  );
  wire [3-1:0] M_myLFSR_result_3bit;
  reg [1-1:0] M_myLFSR_ctr;
  lfsr_randomizer_6 myLFSR (
    .clk(clk),
    .rst(rst),
    .ctr(M_myLFSR_ctr),
    .result_3bit(M_myLFSR_result_3bit)
  );
  wire [1-1:0] M_ctr_value;
  counter_7 ctr (
    .clk(clk),
    .rst(rst),
    .value(M_ctr_value)
  );
  reg [2:0] M_led_pattern_d, M_led_pattern_q = 1'h0;
  reg [3:0] M_keepScore0_d, M_keepScore0_q = 1'h0;
  reg [3:0] M_keepScore1_d, M_keepScore1_q = 1'h0;
  reg [3:0] M_keepLives_d, M_keepLives_q = 3'h5;
  reg [0:0] M_getRdmNum_d, M_getRdmNum_q = 1'h1;
  reg [0:0] M_initGame_d, M_initGame_q = 1'h1;
  reg [2:0] M_buttonArray_d, M_buttonArray_q = 1'h0;
  wire [3-1:0] M_buttons_button_pressed;
  reg [3-1:0] M_buttons_button;
  button_8 buttons (
    .clk(clk),
    .rst(rst),
    .button(M_buttons_button),
    .button_pressed(M_buttons_button_pressed)
  );
  
  reg [3:0] M_glTimeoutCounter_d, M_glTimeoutCounter_q = 2'h3;
  
  localparam INITSTATE_oState = 3'd0;
  localparam CONFIRM_oState = 3'd1;
  localparam START_oState = 3'd2;
  localparam WIN_oState = 3'd3;
  localparam LOSE_oState = 3'd4;
  localparam WAIT_oState = 3'd5;
  localparam PROCESS_IN_oState = 3'd6;
  
  reg [2:0] M_oState_d, M_oState_q = INITSTATE_oState;
  reg [31:0] M_oneSecond_d, M_oneSecond_q = 1'h0;
  
  always @* begin
    M_oState_d = M_oState_q;
    M_led_pattern_d = M_led_pattern_q;
    M_buttonArray_d = M_buttonArray_q;
    M_glTimeoutCounter_d = M_glTimeoutCounter_q;
    M_keepScore0_d = M_keepScore0_q;
    M_keepLives_d = M_keepLives_q;
    M_keepScore1_d = M_keepScore1_q;
    M_getRdmNum_d = M_getRdmNum_q;
    M_initGame_d = M_initGame_q;
    M_oneSecond_d = M_oneSecond_q;
    
    M_alu_a = 8'h00;
    M_alu_b = 8'h00;
    M_alu_alufn = 8'h00;
    M_reset_cond_in = ~rst_n;
    rst = M_reset_cond_out;
    led = {3'h0, io_button};
    spi_miso = 1'bz;
    spi_channel = 4'bzzzz;
    avr_rx = 1'bz;
    io_seg = 8'hff;
    M_edge_detector_in = M_ctr_value;
    M_dec_ctr_inc = M_edge_detector_out;
    M_seg_values = M_dec_ctr_digits;
    io_seg = ~M_seg_seg;
    io_sel = ~M_seg_sel;
    io_led = io_dip;
    M_seg_values = {M_keepScore1_q[0+3-:4], M_keepScore0_q[0+3-:4], M_glTimeoutCounter_q[0+3-:4], M_keepLives_q[0+3-:4]};
    M_buttons_button = io_button[0+2-:3];
    M_myLFSR_ctr = M_ctr_value;
    led[5+2-:3] = M_led_pattern_q;
    if (M_oState_q != START_oState) begin
      M_oneSecond_d = M_oneSecond_q + 1'h1;
      if (M_oneSecond_q == 26'h2faf080) begin
        M_alu_a = M_glTimeoutCounter_q;
        M_alu_b = 1'h1;
        M_alu_alufn = 1'h1;
        M_glTimeoutCounter_d = M_alu_out;
        M_oneSecond_d = 32'h00000000;
      end
    end
    for (i = 1'h0; i < 2'h3; i = i + 1) begin
      emptyArray[(i)*1+0-:1] = 1'h0;
      fullArray[(i)*1+0-:1] = 1'h1;
    end
    for (i = 1'h0; i < 2'h3; i = i + 1) begin
      M_buttonArray_d[(i)*1+0-:1] = io_button[(i)*1+0-:1];
      io_led[(i)*8+(i)*1+0-:1] = M_led_pattern_q[(i)*1+0-:1];
    end
    
    case (M_oState_q)
      INITSTATE_oState: begin
        for (i = 1'h0; i < 3'h5; i = i + 1) begin
          if (i == 1'h0) begin
            led[(i)*1+0-:1] = 1'h1;
          end else begin
            led[(i)*1+0-:1] = 1'h0;
          end
        end
        if (M_initGame_q == 1'h1) begin
          M_led_pattern_d[0+0-:1] = 1'h1;
          M_led_pattern_d[1+0-:1] = 1'h1;
          M_led_pattern_d[2+0-:1] = 1'h1;
          M_glTimeoutCounter_d = 2'h2;
          M_initGame_d = 1'h0;
        end
        if (io_button[0+2-:3] == 1'h0) begin
          M_oState_d = INITSTATE_oState;
        end else begin
          M_oState_d = CONFIRM_oState;
        end
      end
      CONFIRM_oState: begin
        for (i = 1'h0; i < 3'h5; i = i + 1) begin
          if (i == 1'h1) begin
            led[(i)*1+0-:1] = 1'h1;
          end else begin
            led[(i)*1+0-:1] = 1'h0;
          end
        end
        if (io_button[0+0-:1] == 1'h1) begin
          M_led_pattern_d[0+0-:1] = 1'h0;
          M_oState_d = CONFIRM_oState;
        end
        if (io_button[1+0-:1] == 1'h1) begin
          M_led_pattern_d[1+0-:1] = 1'h0;
          M_oState_d = CONFIRM_oState;
        end
        if (io_button[2+0-:1] == 1'h1) begin
          M_led_pattern_d[2+0-:1] = 1'h0;
          M_oState_d = CONFIRM_oState;
        end
        if (M_led_pattern_q == 1'h0) begin
          for (i = 1'h0; i < 2'h3; i = i + 1) begin
            M_led_pattern_d[(i)*1+0-:1] = 1'h0;
          end
          M_getRdmNum_d = 1'h1;
          M_oState_d = START_oState;
        end
      end
      START_oState: begin
        for (i = 1'h0; i < 3'h5; i = i + 1) begin
          if (i == 2'h2) begin
            led[(i)*1+0-:1] = 1'h1;
          end else begin
            led[(i)*1+0-:1] = 1'h0;
          end
        end
        M_glTimeoutCounter_d = 2'h2;
        if (M_getRdmNum_q == 1'h1) begin
          M_led_pattern_d[0+0-:1] = M_myLFSR_result_3bit[0+0-:1];
          M_led_pattern_d[1+0-:1] = M_myLFSR_result_3bit[1+0-:1];
          M_led_pattern_d[2+0-:1] = M_myLFSR_result_3bit[2+0-:1];
          M_getRdmNum_d = 1'h0;
        end
        if (M_keepLives_q[0+2-:3] <= 4'h0) begin
          M_oState_d = LOSE_oState;
        end
        if (M_keepScore1_q[0+2-:3] == 4'h9 & M_keepScore0_q[0+2-:3] >= 4'h8) begin
          M_oState_d = WIN_oState;
        end else begin
          if (M_led_pattern_q[0+2-:3] == 1'h0) begin
            M_getRdmNum_d = 1'h1;
            M_oState_d = START_oState;
          end else begin
            M_oState_d = WAIT_oState;
          end
        end
      end
      WIN_oState: begin
        for (i = 1'h0; i < 3'h5; i = i + 1) begin
          if (i == 1'h0) begin
            led[(i)*1+0-:1] = 1'h0;
          end else begin
            led[(i)*1+0-:1] = 1'h0;
          end
        end
        M_keepScore0_d = 4'h0;
        M_keepScore1_d = 4'h0;
        M_keepLives_d = 4'h5;
        M_initGame_d = 1'h1;
        M_glTimeoutCounter_d = 2'h2;
        M_oState_d = INITSTATE_oState;
      end
      LOSE_oState: begin
        for (i = 1'h0; i < 3'h5; i = i + 1) begin
          if (i == 1'h0) begin
            led[(i)*1+0-:1] = 1'h1;
          end else begin
            led[(i)*1+0-:1] = 1'h0;
          end
        end
        M_keepScore0_d = 4'h0;
        M_keepScore1_d = 4'h0;
        M_keepLives_d = 4'h5;
        M_initGame_d = 1'h1;
        M_glTimeoutCounter_d = 2'h2;
        M_oState_d = INITSTATE_oState;
      end
      WAIT_oState: begin
        for (i = 1'h0; i < 3'h5; i = i + 1) begin
          if (i == 3'h4) begin
            led[(i)*1+0-:1] = 1'h1;
          end else begin
            led[(i)*1+0-:1] = 1'h0;
          end
        end
        if (M_glTimeoutCounter_q <= 1'h0) begin
          if (M_keepLives_q > 1'h0) begin
            M_keepLives_d = M_keepLives_q - 1'h1;
          end
          M_getRdmNum_d = 1'h1;
          M_oState_d = START_oState;
        end else begin
          if (M_led_pattern_q[0+2-:3] == 1'h0) begin
            M_getRdmNum_d = 1'h1;
            M_oState_d = START_oState;
          end else begin
            if (M_keepLives_q == 4'h0) begin
              M_oState_d = LOSE_oState;
            end else begin
              if (io_button[0+2-:3] != 1'h0) begin
                M_oState_d = PROCESS_IN_oState;
              end else begin
                M_oState_d = WAIT_oState;
              end
            end
          end
        end
      end
      PROCESS_IN_oState: begin
        for (i = 1'h0; i < 3'h5; i = i + 1) begin
          if (i == 1'h0) begin
            led[(i)*1+0-:1] = 1'h1;
          end else begin
            led[(i)*1+0-:1] = 1'h0;
          end
        end
        for (i = 1'h0; i < 2'h3; i = i + 1) begin
          if (M_buttons_button_pressed[(i)*1+0-:1] == 1'h1) begin
            if (M_led_pattern_q[(i)*1+0-:1] == 1'h1) begin
              M_led_pattern_d[(i)*1+0-:1] = 1'h0;
              if (M_keepScore0_q == 4'h9) begin
                M_keepScore1_d = M_keepScore1_q + 1'h1;
                M_keepScore0_d = 4'h0;
              end else begin
                M_keepScore0_d = M_keepScore0_q + 1'h1;
              end
            end
            if (M_led_pattern_q[(i)*1+0-:1] == 1'h0) begin
              if (M_keepLives_q > 1'h0) begin
                M_keepLives_d = M_keepLives_q - 1'h1;
              end
            end
          end
        end
        if (M_keepLives_q <= 1'h0) begin
          M_oState_d = LOSE_oState;
        end else begin
          M_oState_d = WAIT_oState;
        end
      end
    endcase
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_oneSecond_q <= 1'h0;
      M_oState_q <= 1'h0;
    end else begin
      M_oneSecond_q <= M_oneSecond_d;
      M_oState_q <= M_oState_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_glTimeoutCounter_q <= 2'h3;
    end else begin
      M_glTimeoutCounter_q <= M_glTimeoutCounter_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_led_pattern_q <= 1'h0;
      M_keepScore0_q <= 1'h0;
      M_keepScore1_q <= 1'h0;
      M_keepLives_q <= 3'h5;
      M_getRdmNum_q <= 1'h1;
      M_initGame_q <= 1'h1;
      M_buttonArray_q <= 1'h0;
    end else begin
      M_led_pattern_q <= M_led_pattern_d;
      M_keepScore0_q <= M_keepScore0_d;
      M_keepScore1_q <= M_keepScore1_d;
      M_keepLives_q <= M_keepLives_d;
      M_getRdmNum_q <= M_getRdmNum_d;
      M_initGame_q <= M_initGame_d;
      M_buttonArray_q <= M_buttonArray_d;
    end
  end
  
endmodule
